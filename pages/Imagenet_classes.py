import streamlit as st
import torch
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image
import time
import requests
from io import BytesIO
import ssl
from urllib.request import urlretrieve
import os
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", layout="wide")
st.title("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–≤—É–º—è –º–æ–¥–µ–ª—è–º–∏")

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ SSL-–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π (—Ç–∞–∫ –≤–æ–æ–±—â–µ –Ω–∏–∫—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç)
ssl._create_default_https_context = ssl._create_unverified_context

# ImageNet
@st.cache_data
def load_imagenet_labels():
    url = "https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt"
    try:
        urlretrieve(url, "imagenet_classes.txt")
        with open("imagenet_classes.txt") as f:
            labels = [line.strip() for line in f.readlines()]
        return labels
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Å–æ–≤: {e}")
        return [f"class_{i}" for i in range(1000)]

labels = load_imagenet_labels()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
@st.cache_resource
def load_models():
    resnet = models.resnet50(pretrained=True)
    efficientnet = models.efficientnet_b0(pretrained=True)
    resnet.eval()
    efficientnet.eval()
    return resnet, efficientnet

resnet, efficientnet = load_models()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ URL
def load_image_from_url(url):
    try:
        response = requests.get(url, timeout=5)
        image = Image.open(BytesIO(response.content)).convert('RGB')
        return image
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {e}")
        return None

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
def resize_image_for_display(image, max_size=600):
    width, height = image.size
    if max(width, height) > max_size:
        ratio = max_size / max(width, height)
        new_size = (int(width * ratio), int(height * ratio))
        return image.resize(new_size, Image.LANCZOS)
    return image

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def preprocess_image(image):
    transform = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    return transform(image).unsqueeze(0)

def get_predictions(model, input_tensor):
    with torch.no_grad():
        outputs = model(input_tensor)
    probabilities = torch.nn.functional.softmax(outputs[0], dim=0)
    return probabilities

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if 'images' not in st.session_state:
    st.session_state.images = []
    st.session_state.image_names = []
    st.session_state.performance_data = {
        'Image': [],
        'ResNet50_time': [],
        'EfficientNet_time': [],
        'Total_time': []
    }

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
st.sidebar.header("–°–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
option = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:", 
                         ("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", "–£–∫–∞–∑–∞—Ç—å URL-—ã"))

if option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã":
    uploaded_files = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 
                                           type=["jpg", "jpeg", "png"],
                                           accept_multiple_files=True)
    if uploaded_files:
        st.session_state.images = []
        st.session_state.image_names = []
        st.session_state.performance_data = {
            'Image': [],
            'ResNet50_time': [],
            'EfficientNet_time': [],
            'Total_time': []
        }
        for uploaded_file in uploaded_files:
            image = Image.open(uploaded_file).convert('RGB')
            st.session_state.images.append(image)
            st.session_state.image_names.append(uploaded_file.name)
else:
    urls = st.sidebar.text_area("–í–≤–µ–¥–∏—Ç–µ URL-—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É):")
    if urls:
        url_list = [url.strip() for url in urls.split('\n') if url.strip()]
        st.session_state.images = []
        st.session_state.image_names = []
        st.session_state.performance_data = {
            'Image': [],
            'ResNet50_time': [],
            'EfficientNet_time': [],
            'Total_time': []
        }
        for url in url_list:
            if url != "https://example.com/image.jpg":
                image = load_image_from_url(url)
                if image:
                    st.session_state.images.append(image)
                    st.session_state.image_names.append(os.path.basename(url))

# –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if st.session_state.images:
    st.subheader(f"üî¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(st.session_state.images)}")
    
    for idx, (image, image_name) in enumerate(zip(st.session_state.images, st.session_state.image_names)):
        st.markdown(f"---\n### –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx+1}: {image_name}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        col_img, _ = st.columns([1, 2])
        with col_img:
            display_image = resize_image_for_display(image)
            st.image(display_image, caption=image_name, use_column_width=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–µ–π
        input_tensor = preprocess_image(image)
        
        col1, col2 = st.columns(2)
        
        # ResNet
        with col1:
            st.subheader("ResNet50")
            start_time = time.time()
            probs = get_predictions(resnet, input_tensor)
            resnet_time = (time.time() - start_time) * 1000
            
            top2_probs, top2_indices = torch.topk(probs, 2)
            
            st.write("**–¢–æ–ø-2 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:**")
            for i in range(2):
                class_name = labels[top2_indices[i]].replace("_", " ").capitalize()
                st.write(f"üèÜ **{class_name}**: {top2_probs[i].item()*100:.2f}%")
            
            st.write(f"‚è± **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏**: {resnet_time:.2f} –º—Å")
        
        # EfficientNet
        with col2:
            st.subheader("EfficientNet")
            start_time = time.time()
            probs = get_predictions(efficientnet, input_tensor)
            effnet_time = (time.time() - start_time) * 1000
            
            top2_probs, top2_indices = torch.topk(probs, 2)
            
            st.write("**–¢–æ–ø-2 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:**")
            for i in range(2):
                class_name = labels[top2_indices[i]].replace("_", " ").capitalize()
                st.write(f"üèÜ **{class_name}**: {top2_probs[i].item()*100:.2f}%")
            
            st.write(f"‚è± **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏**: {effnet_time:.2f} –º—Å")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        st.session_state.performance_data['Image'].append(f"Img {idx+1}")
        st.session_state.performance_data['ResNet50_time'].append(resnet_time)
        st.session_state.performance_data['EfficientNet_time'].append(effnet_time)
        st.session_state.performance_data['Total_time'].append(resnet_time + effnet_time)
    
    st.markdown("---")
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    df = pd.DataFrame(st.session_state.performance_data)
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    fig, ax = plt.subplots(figsize=(10, 5))
    x = np.arange(len(df))
    width = 0.35
    
    rects1 = ax.bar(x - width/2, df['ResNet50_time'], width, label='ResNet50', color='#1f77b4')
    rects2 = ax.bar(x + width/2, df['EfficientNet_time'], width, label='EfficientNet', color='#ff7f0e')
    
    ax.set_xlabel('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    ax.set_ylabel('–í—Ä–µ–º—è (–º—Å)')
    ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    ax.set_xticks(x)
    ax.set_xticklabels(df['Image'])
    ax.legend()
    ax.grid(True, linestyle='--', alpha=0.6)
    
    st.pyplot(fig)
    
    # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìà –°–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è ResNet50", f"{df['ResNet50_time'].mean():.2f} –º—Å")
    with col2:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è EfficientNet", f"{df['EfficientNet_time'].mean():.2f} –º—Å")
    with col3:
        st.metric("–û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{df['Total_time'].sum():.2f} –º—Å")
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    st.dataframe(df.set_index('Image'), use_container_width=True)

else:
    st.info("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é —Å–ª–µ–≤–∞")

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if st.sidebar.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
    st.session_state.images = []
    st.session_state.image_names = []
    st.session_state.performance_data = {
        'Image': [],
        'ResNet50_time': [],
        'EfficientNet_time': [],
        'Total_time': []
    }
    st.experimental_rerun()